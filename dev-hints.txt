we only encountered React elements that represent DOM tags:
const element = <div />;

However, elements can also represent user-defined components:
const element = <Welcome name="Sara" />;
https://reactjs.org/docs/components-and-props.html#function-and-class-components
---------------------

when creating an array, use array literal [] instead of new Array for simplicity, readability and execution speed.
var cars = [
  "Saab",
  "Volvo",
  "BMW"
];
var cars = new Array("Saab", "Volvo", "BMW"); 
https://www.w3schools.com/js/js_arrays.asp
---------------------

Arrays are a special type of objects
-------------------------

function myFunction(value) {
  text += "<li>" + value + "</li>";
} 

or 

var myFunction = function()
{

}

or 

arrow functions


multiple ways to do a function 
first: specifying it as an arrow function inside a variable
const menu = props.dishes.map( (dish) => 
        {
            return (
                <div key="{dish.id}" className="col-12 col-md-5 m-1">
                    <RenderMenuItem dish={dish} onClick={props.onClick} />
                </div>
            );
        });

        return (
            <div className="container">
                <div className="row">
                    {menu}
                </div>
            </div>
        );

Second: doing it inline
<div className="col-12 col-md-5 m-1">
                    <h4>Comments</h4>
                    <div>
                        {
                            commnets.map( (comment) => 
                            {
                                return(
                                    <ul className="list-unstyled">
                                        <li> 
                                            <p> {comment.comment} </p>
                                            <p> -- {comment.author}, {new Intl.DateTimeFormat('en-US', {year: 'numeric', month: 'short', day: '2-digit'}).format(new Date((Date.parse(comment.date)))) } </p>
                                        </li>
                                    </ul>
                                );   
                            })
                        }
                    </div>
                </div>

third: doing it as a normal funciton

------------------------------------------------------------------

state is where I keep my class attributes(variables), so I use class component
only when I have to handle a state, function component otherwise.

------------------------------------------------------------------
if you use class components, say this.props.Comments
if you use function components, say props.Comments

------------------------------------------------------------------
I sent parameters like this:
function RenderMenuItem({dish, onClick}) 
and not like this (dish, onClick), as this function is not
a function, it's a component, and the parameters passed to it as props
<RenderMenuItem dish={dish} onClick={props.onClick} />



---------------------------------------------------------
const HomePage = () => {
      return(
          <Home 
              dish={this.state.dishes.filter((dish) => dish.featured)[0]}
              promotion={this.state.promotions.filter((promo) => promo.featured)[0]}
              leader={this.state.leaders.filter((leader) => leader.featured)[0]}
          />
      );
    }

<Route path='/home' component={HomePage} />
<Route exact path='/menu' component={ () => <Menu dishes={this.state.dishes} /> } />
<Route exact path='/contact' component={Contact} />

- three different way of assigning component, 
    -third one can be when you don't need to pass props
    -first one if I will pass a lot of things

---------------------------------------------------------

match, location, history

---------------------------------------------------------

Route passes three parameters to the component:
match, location, history

---------------------------------------------------------
this is how to access objects array comments inside objects array dish
(props.dish || {}).comments